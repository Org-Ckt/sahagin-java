subMethodTable:
  methods:
  - codeBody: []
    name: "*.TestMain.testDocMethod"
    capture: stepIn
    argVariables: []
    classKey: "*TestMain;"
    testDoc: Doc:testDocMethod
    key: "*TestMain;.testDocMethod()V"
  - codeBody: []
    name: "*.TestPage.InnerClass.innerClassMethod"
    capture: thisLine
    argVariables: []
    classKey: "*TestPage$InnerClass;"
    testDoc: Doc:innerClass
    key: "*TestPage$InnerClass;.innerClassMethod()V"
  - codeBody: []
    name: "*.TestPage.TestPage"
    capture: thisLine
    argVariables: []
    classKey: "*TestPage;"
    testDoc: 'Doc: TestPage'
    key: "*TestPage;.()V"
  - codeBody: []
    name: "*.TestPage.argMethod"
    capture: thisLine
    argVariables: [arg1, arg2]
    classKey: "*TestPage;"
    testDoc: Doc:argMethod:{arg1}:{arg2}:{0}:{1}:{this}
    key: "*TestPage;.argMethod(Ljava/lang/String;I)V"
  - codeBody:
    - code: {original: return "EEE";, type: unknown}
    name: "*.TestPage.getData"
    capture: thisLine
    argVariables: []
    classKey: "*TestPage;"
    testDoc: data
    key: "*TestPage;.getData()Ljava/lang/String;"
  - codeBody:
    - code: {original: InnerClass innerClass=new InnerClass();, type: unknown}
    - code:
        original: innerClass.innerClassMethod();
        methodKey: "*TestPage$InnerClass;.innerClassMethod()V"
        thisInstance: {original: innerClass, type: unknown}
        args: []
    name: "*.TestPage.inenrClassCall"
    capture: thisLine
    argVariables: []
    classKey: "*TestPage;"
    testDoc: Doc:innerTestCall
    key: "*TestPage;.inenrClassCall()V"
  - codeBody:
    - code:
        original: nest2(arg);
        methodKey: "*TestPage;.nest2(Ljava/lang/String;)V"
        args:
        - {argIndex: 0, original: arg, type: arg}
    name: "*.TestPage.nest1"
    capture: thisLine
    argVariables: [arg]
    classKey: "*TestPage;"
    testDoc: Doc:nest1:{arg}
    key: "*TestPage;.nest1(Ljava/lang/String;)V"
  - codeBody:
    - code:
        original: nest3(arg);
        methodKey: "*TestPage;.nest3(Ljava/lang/String;)V"
        args:
        - {argIndex: 0, original: arg, type: arg}
    name: "*.TestPage.nest2"
    capture: thisLine
    argVariables: [arg]
    classKey: "*TestPage;"
    testDoc: Doc:nest2:{arg}
    key: "*TestPage;.nest2(Ljava/lang/String;)V"
  - codeBody:
    - code: {original: int i=0;, type: unknown}
    - code: {original: int j=1;, type: unknown}
    - code:
        original: |-
          if (i != j) {
            return;
          }
        type: unknown
    - code:
        original: nest1(arg);
        methodKey: "*TestPage;.nest1(Ljava/lang/String;)V"
        args:
        - {argIndex: 0, original: arg, type: arg}
    name: "*.TestPage.nest3"
    capture: thisLine
    argVariables: [arg]
    classKey: "*TestPage;"
    testDoc: Doc:nest3:{arg}
    key: "*TestPage;.nest3(Ljava/lang/String;)V"
  - codeBody:
    - code: {original: int i=0;, type: unknown}
    - code: {original: int j=1;, type: unknown}
    - code:
        original: |-
          if (i != j) {
            return;
          }
        type: unknown
    - code:
        original: recurseMethodCall();
        methodKey: "*TestPage;.recurseMethodCall()V"
        args: []
    name: "*.TestPage.recurseMethodCall"
    capture: thisLine
    argVariables: []
    classKey: "*TestPage;"
    testDoc: 'Doc: recurseMethodCall'
    key: "*TestPage;.recurseMethodCall()V"
  - codeBody: []
    name: "*.TestPage.staticMethod"
    capture: thisLine
    argVariables: []
    classKey: "*TestPage;"
    testDoc: Doc:staticMethod
    key: "*TestPage;.staticMethod()V"
  - codeBody: []
    name: "*.TestSub.subMethod"
    capture: thisLine
    argVariables: []
    classKey: "*TestSub;"
    testDoc: 'Doc: subMethod'
    key: "*TestSub;.subMethod()V"
rootMethodTable:
  methods:
  - codeBody:
    - code:
        original: TestSub.subMethod();
        methodKey: "*TestSub;.subMethod()V"
        thisInstance: {original: TestSub, type: unknown}
        args: []
    - code:
        original: testDocMethod();
        methodKey: "*TestMain;.testDocMethod()V"
        args: []
    - code:
        original: testDocMethod();
        methodKey: "*TestMain;.testDocMethod()V"
        args: []
    - code:
        original: testDocMethod();
        methodKey: "*TestMain;.testDocMethod()V"
        args: []
    - code: {original: noTestDocMethod();, type: unknown}
    - code:
        original: TestPage page=new TestPage();
        methodKey: "*TestPage;.()V"
        args: []
    - code:
        original: page.inenrClassCall();
        methodKey: "*TestPage;.inenrClassCall()V"
        thisInstance: {original: page, type: unknown}
        args: []
    - code:
        original: TestPage.staticMethod();
        methodKey: "*TestPage;.staticMethod()V"
        thisInstance: {original: TestPage, type: unknown}
        args: []
    - code:
        original: page.staticMethod();
        methodKey: "*TestPage;.staticMethod()V"
        thisInstance: {original: page, type: unknown}
        args: []
    - code:
        original: page.argMethod("AAA",999);
        methodKey: "*TestPage;.argMethod(Ljava/lang/String;I)V"
        thisInstance: {original: page, type: unknown}
        args:
        - {value: AAA, original: '"AAA"', type: string}
        - {original: '999', type: unknown}
    - code:
        original: page.argMethod(null,0);
        methodKey: "*TestPage;.argMethod(Ljava/lang/String;I)V"
        thisInstance: {original: page, type: unknown}
        args:
        - {original: 'null', type: unknown}
        - {original: '0', type: unknown}
    - code:
        original: page.recurseMethodCall();
        methodKey: "*TestPage;.recurseMethodCall()V"
        thisInstance: {original: page, type: unknown}
        args: []
    - code:
        original: page.nest1("DDD");
        methodKey: "*TestPage;.nest1(Ljava/lang/String;)V"
        thisInstance: {original: page, type: unknown}
        args:
        - {value: DDD, original: '"DDD"', type: string}
    - code: {original: 'assertThat(page.getData(),is("EEE"));', type: unknown}
    - code: {original: 'assertEquals(page.getData(),"EEE");', type: unknown}
    - code:
        original: |-
          if (wd == null) {
            return;
          }
        type: unknown
    - code: {original: wd.get("***.com");, type: unknown}
    - code: {original: wd.findElement(By.id("FFF")).click();, type: unknown}
    - code: {original: wd.findElement(By.cssSelector("GGG")).sendKeys("HHH");, type: unknown}
    name: "*.TestMain.testMethod1"
    capture: thisLine
    argVariables: []
    classKey: "*TestMain;"
    testDoc: null
    key: "*TestMain;.testMethod1()V"
  - codeBody: []
    name: "*.TestMain.testMethod2"
    capture: thisLine
    argVariables: []
    classKey: "*TestMain;"
    testDoc: Doc:TestMethod2
    key: "*TestMain;.testMethod2()V"
subClassTable:
  classes:
  - testDoc: Doc:TestPage
    type: page
    key: "*TestPage;"
    methodKeys: "*"
    name: "*.TestPage"
  - testDoc: null
    type: class
    key: "*TestPage$InnerClass;"
    methodKeys: ["*TestPage$InnerClass;.innerClassMethod()V"]
    name: "*.TestPage.InnerClass"
  - testDoc: null
    type: class
    key: "*TestSub;"
    methodKeys: ["*TestSub;.subMethod()V"]
    name: "*.TestSub"
formatVersion: "*"
rootClassTable:
  classes:
  - testDoc: null
    type: class
    key: "*TestMain;"
    name: "*.TestMain"
